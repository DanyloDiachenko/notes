import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Header } from "@/components/common/Header";
import { Aside } from "@/components/common/Aside";
import { getPathname } from "@/helpers/getPathname";
import { ReduxProvider } from "@/components/providers/Redux";
import { Modals } from "@/components/modals";
import { getCookie } from "@/helpers/getCookie";
import { getProfile } from "@/api/auth.api";
import { ToastProvider } from "@/components/providers/Toast";
import { getTags } from "@/api/tags.api";
import { Tag } from "@/types/tag.interface";

const geistSans = Inter({
    variable: "--font-inter",
    weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
    preload: true,
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

const RootLayout = async ({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) => {
    const pathname = await getPathname();
    const token = await getCookie("token");

    let tags: Tag[] = [];
    let isAuthorized = false;

    if (!token) {
        isAuthorized = false;
    } else {
        try {
            const profile = await getProfile();

            if (profile.email) {
                isAuthorized = true;
            }
        } catch (error) {
            console.log(error);

            isAuthorized = false;
        }
    }

    if (isAuthorized) {
        try {
            tags = await getTags();
        } catch (error) {
            console.log(error);
        }
    }

    return (
        <html lang="en">
            <body
                className={`${geistSans.variable} antialiased grid grid-cols-[minmax(200px,_280px)_1fr]`}
            >
                <ReduxProvider>
                    <Aside
                        pathname={pathname}
                        tags={tags}
                        isAuthorized={isAuthorized}
                    />
                    <main className="w-full">
                        <Header
                            pathname={pathname}
                            isAuthorized={isAuthorized}
                        />
                        {children}
                    </main>
                    <Modals />
                    <ToastProvider />
                </ReduxProvider>
            </body>
        </html>
    );
};

export default RootLayout;
